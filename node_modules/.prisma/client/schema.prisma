// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizations OrganizationMember[]
  contentItems  ContentItem[]
  analytics     Analytics[]
  reports       Report[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members      OrganizationMember[]
  contentItems ContentItem[]
  analytics    Analytics[]
  reports      Report[]
  integrations SocialMediaIntegration[]

  @@map("organizations")
}

model OrganizationMember {
  id       String     @id @default(cuid())
  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())

  // Relations
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model ContentItem {
  id          String         @id @default(cuid())
  title       String?
  content     String
  contentType ContentType
  platform    SocialPlatform
  externalId  String? // ID from social media platform
  externalUrl String?
  publishedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  analytics      Analytics[]
  aiInsights     AIInsight[]

  @@map("content_items")
}

model Analytics {
  id             String   @id @default(cuid())
  likes          Int      @default(0)
  shares         Int      @default(0)
  comments       Int      @default(0)
  views          Int      @default(0)
  clicks         Int      @default(0)
  engagementRate Float?
  reach          Int?
  impressions    Int?
  recordedAt     DateTime @default(now())

  // Relations
  contentItemId  String
  contentItem    ContentItem   @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model AIInsight {
  id          String      @id @default(cuid())
  insightType InsightType
  confidence  Float
  data        Json
  createdAt   DateTime    @default(now())

  // Relations
  contentItemId String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)

  @@map("ai_insights")
}

model Report {
  id          String     @id @default(cuid())
  title       String
  description String?
  data        Json
  reportType  ReportType
  dateRange   Json? // { start: Date, end: Date }
  createdAt   DateTime   @default(now())

  // Relations
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model SocialMediaIntegration {
  id           String         @id @default(cuid())
  platform     SocialPlatform
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("social_media_integrations")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum UserRole {
  ADMIN
  USER
  ANALYST
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ContentType {
  POST
  ARTICLE
  VIDEO
  STORY
  REEL
  TWEET
  THREAD
}

enum SocialPlatform {
  TWITTER
  LINKEDIN
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TIKTOK
  BLOG
}

enum InsightType {
  SENTIMENT
  TOPIC_CLUSTERING
  ENGAGEMENT_PREDICTION
  OPTIMAL_POSTING_TIME
  AUDIENCE_ANALYSIS
  CONTENT_RECOMMENDATION
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
  COMPETITIVE_ANALYSIS
  CONTENT_PERFORMANCE
  AUDIENCE_INSIGHTS
}
